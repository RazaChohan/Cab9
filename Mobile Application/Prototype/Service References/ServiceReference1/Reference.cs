//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18408
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace Prototype.ServiceReference1 {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CompositeType", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class CompositeType : object, System.ComponentModel.INotifyPropertyChanged {
        
        private bool BoolValueField;
        
        private string StringValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool BoolValue {
            get {
                return this.BoolValueField;
            }
            set {
                if ((this.BoolValueField.Equals(value) != true)) {
                    this.BoolValueField = value;
                    this.RaisePropertyChanged("BoolValue");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StringValue {
            get {
                return this.StringValueField;
            }
            set {
                if ((object.ReferenceEquals(this.StringValueField, value) != true)) {
                    this.StringValueField = value;
                    this.RaisePropertyChanged("StringValue");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService")]
    public interface IService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetData", ReplyAction="http://tempuri.org/IService/GetDataResponse")]
        System.IAsyncResult BeginGetData(int value, System.AsyncCallback callback, object asyncState);
        
        string EndGetData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetDataUsingDataContract", ReplyAction="http://tempuri.org/IService/GetDataUsingDataContractResponse")]
        System.IAsyncResult BeginGetDataUsingDataContract(Prototype.ServiceReference1.CompositeType composite, System.AsyncCallback callback, object asyncState);
        
        Prototype.ServiceReference1.CompositeType EndGetDataUsingDataContract(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/CalculateRoadDistance", ReplyAction="http://tempuri.org/IService/CalculateRoadDistanceResponse")]
        System.IAsyncResult BeginCalculateRoadDistance(string Origin, string Destination, System.AsyncCallback callback, object asyncState);
        
        double EndCalculateRoadDistance(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/CabBooking", ReplyAction="http://tempuri.org/IService/CabBookingResponse")]
        System.IAsyncResult BeginCabBooking(string BookingStatus, System.DateTime BookingDateTime, string BookingOrigin, string BookingDestination, string BookingCabType, string SourceLat, string SourceLong, string DestinationLat, string DestinationLong, string CustomerID, System.AsyncCallback callback, object asyncState);
        
        string EndCabBooking(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/AuthenticateCustomer", ReplyAction="http://tempuri.org/IService/AuthenticateCustomerResponse")]
        System.IAsyncResult BeginAuthenticateCustomer(string username, string password, System.AsyncCallback callback, object asyncState);
        
        int EndAuthenticateCustomer(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/AuthenticateDriver", ReplyAction="http://tempuri.org/IService/AuthenticateDriverResponse")]
        System.IAsyncResult BeginAuthenticateDriver(string username, string password, System.AsyncCallback callback, object asyncState);
        
        int EndAuthenticateDriver(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/CustomerRegistrationRequest", ReplyAction="http://tempuri.org/IService/CustomerRegistrationRequestResponse")]
        System.IAsyncResult BeginCustomerRegistrationRequest(string name, string password, string email, string phNum, string NIC, string address, string gender, string age, System.AsyncCallback callback, object asyncState);
        
        string EndCustomerRegistrationRequest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/UpdateLocation", ReplyAction="http://tempuri.org/IService/UpdateLocationResponse")]
        System.IAsyncResult BeginUpdateLocation(string latitude, string longitude, int CabID, System.AsyncCallback callback, object asyncState);
        
        string EndUpdateLocation(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/CabIDforDriver", ReplyAction="http://tempuri.org/IService/CabIDforDriverResponse")]
        System.IAsyncResult BeginCabIDforDriver(int DriverID, System.AsyncCallback callback, object asyncState);
        
        int EndCabIDforDriver(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/CheckForDriverBooking", ReplyAction="http://tempuri.org/IService/CheckForDriverBookingResponse")]
        System.IAsyncResult BeginCheckForDriverBooking(int CabID, System.AsyncCallback callback, object asyncState);
        
        string EndCheckForDriverBooking(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/AddresstoCoordinates", ReplyAction="http://tempuri.org/IService/AddresstoCoordinatesResponse")]
        System.IAsyncResult BeginAddresstoCoordinates(string location, System.AsyncCallback callback, object asyncState);
        
        string EndAddresstoCoordinates(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/MakeAvailableIfReached", ReplyAction="http://tempuri.org/IService/MakeAvailableIfReachedResponse")]
        System.IAsyncResult BeginMakeAvailableIfReached(int CabID, string DestinationLat, string DestinationLong, int BookingID, System.AsyncCallback callback, object asyncState);
        
        bool EndMakeAvailableIfReached(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/CheckCustomerBookings", ReplyAction="http://tempuri.org/IService/CheckCustomerBookingsResponse")]
        System.IAsyncResult BeginCheckCustomerBookings(int CustomerID, System.AsyncCallback callback, object asyncState);
        
        int EndCheckCustomerBookings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/GetBookingTime", ReplyAction="http://tempuri.org/IService/GetBookingTimeResponse")]
        System.IAsyncResult BeginGetBookingTime(int BookingID, System.AsyncCallback callback, object asyncState);
        
        System.DateTime EndGetBookingTime(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/CancelBooking", ReplyAction="http://tempuri.org/IService/CancelBookingResponse")]
        System.IAsyncResult BeginCancelBooking(int BookingID, string time, string BookingStatus, int ApproximateFare, System.AsyncCallback callback, object asyncState);
        
        string EndCancelBooking(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/CheckForDriverCancelledBookings", ReplyAction="http://tempuri.org/IService/CheckForDriverCancelledBookingsResponse")]
        System.IAsyncResult BeginCheckForDriverCancelledBookings(int CabID, System.AsyncCallback callback, object asyncState);
        
        int EndCheckForDriverCancelledBookings(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/DetailsForCancelledBooking", ReplyAction="http://tempuri.org/IService/DetailsForCancelledBookingResponse")]
        System.IAsyncResult BeginDetailsForCancelledBooking(int BookingID, System.AsyncCallback callback, object asyncState);
        
        string EndDetailsForCancelledBooking(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/UpdateBookingAndCabStatus", ReplyAction="http://tempuri.org/IService/UpdateBookingAndCabStatusResponse")]
        System.IAsyncResult BeginUpdateBookingAndCabStatus(int BookingID, int CabID, System.AsyncCallback callback, object asyncState);
        
        string EndUpdateBookingAndCabStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IService/RateDriver", ReplyAction="http://tempuri.org/IService/RateDriverResponse")]
        System.IAsyncResult BeginRateDriver(string CabRegNo, int rating, System.AsyncCallback callback, object asyncState);
        
        int EndRateDriver(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceChannel : Prototype.ServiceReference1.IService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDataUsingDataContractCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDataUsingDataContractCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public Prototype.ServiceReference1.CompositeType Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((Prototype.ServiceReference1.CompositeType)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CalculateRoadDistanceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CalculateRoadDistanceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public double Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CabBookingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CabBookingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticateCustomerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AuthenticateCustomerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AuthenticateDriverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AuthenticateDriverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CustomerRegistrationRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CustomerRegistrationRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CabIDforDriverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CabIDforDriverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckForDriverBookingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckForDriverBookingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class AddresstoCoordinatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public AddresstoCoordinatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MakeAvailableIfReachedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MakeAvailableIfReachedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckCustomerBookingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckCustomerBookingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetBookingTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetBookingTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.DateTime Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.DateTime)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CancelBookingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CancelBookingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CheckForDriverCancelledBookingsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CheckForDriverCancelledBookingsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DetailsForCancelledBookingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DetailsForCancelledBookingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class UpdateBookingAndCabStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public UpdateBookingAndCabStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RateDriverCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RateDriverCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public int Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceClient : System.ServiceModel.ClientBase<Prototype.ServiceReference1.IService>, Prototype.ServiceReference1.IService {
        
        private BeginOperationDelegate onBeginGetDataDelegate;
        
        private EndOperationDelegate onEndGetDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDataUsingDataContractDelegate;
        
        private EndOperationDelegate onEndGetDataUsingDataContractDelegate;
        
        private System.Threading.SendOrPostCallback onGetDataUsingDataContractCompletedDelegate;
        
        private BeginOperationDelegate onBeginCalculateRoadDistanceDelegate;
        
        private EndOperationDelegate onEndCalculateRoadDistanceDelegate;
        
        private System.Threading.SendOrPostCallback onCalculateRoadDistanceCompletedDelegate;
        
        private BeginOperationDelegate onBeginCabBookingDelegate;
        
        private EndOperationDelegate onEndCabBookingDelegate;
        
        private System.Threading.SendOrPostCallback onCabBookingCompletedDelegate;
        
        private BeginOperationDelegate onBeginAuthenticateCustomerDelegate;
        
        private EndOperationDelegate onEndAuthenticateCustomerDelegate;
        
        private System.Threading.SendOrPostCallback onAuthenticateCustomerCompletedDelegate;
        
        private BeginOperationDelegate onBeginAuthenticateDriverDelegate;
        
        private EndOperationDelegate onEndAuthenticateDriverDelegate;
        
        private System.Threading.SendOrPostCallback onAuthenticateDriverCompletedDelegate;
        
        private BeginOperationDelegate onBeginCustomerRegistrationRequestDelegate;
        
        private EndOperationDelegate onEndCustomerRegistrationRequestDelegate;
        
        private System.Threading.SendOrPostCallback onCustomerRegistrationRequestCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateLocationDelegate;
        
        private EndOperationDelegate onEndUpdateLocationDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateLocationCompletedDelegate;
        
        private BeginOperationDelegate onBeginCabIDforDriverDelegate;
        
        private EndOperationDelegate onEndCabIDforDriverDelegate;
        
        private System.Threading.SendOrPostCallback onCabIDforDriverCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckForDriverBookingDelegate;
        
        private EndOperationDelegate onEndCheckForDriverBookingDelegate;
        
        private System.Threading.SendOrPostCallback onCheckForDriverBookingCompletedDelegate;
        
        private BeginOperationDelegate onBeginAddresstoCoordinatesDelegate;
        
        private EndOperationDelegate onEndAddresstoCoordinatesDelegate;
        
        private System.Threading.SendOrPostCallback onAddresstoCoordinatesCompletedDelegate;
        
        private BeginOperationDelegate onBeginMakeAvailableIfReachedDelegate;
        
        private EndOperationDelegate onEndMakeAvailableIfReachedDelegate;
        
        private System.Threading.SendOrPostCallback onMakeAvailableIfReachedCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckCustomerBookingsDelegate;
        
        private EndOperationDelegate onEndCheckCustomerBookingsDelegate;
        
        private System.Threading.SendOrPostCallback onCheckCustomerBookingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetBookingTimeDelegate;
        
        private EndOperationDelegate onEndGetBookingTimeDelegate;
        
        private System.Threading.SendOrPostCallback onGetBookingTimeCompletedDelegate;
        
        private BeginOperationDelegate onBeginCancelBookingDelegate;
        
        private EndOperationDelegate onEndCancelBookingDelegate;
        
        private System.Threading.SendOrPostCallback onCancelBookingCompletedDelegate;
        
        private BeginOperationDelegate onBeginCheckForDriverCancelledBookingsDelegate;
        
        private EndOperationDelegate onEndCheckForDriverCancelledBookingsDelegate;
        
        private System.Threading.SendOrPostCallback onCheckForDriverCancelledBookingsCompletedDelegate;
        
        private BeginOperationDelegate onBeginDetailsForCancelledBookingDelegate;
        
        private EndOperationDelegate onEndDetailsForCancelledBookingDelegate;
        
        private System.Threading.SendOrPostCallback onDetailsForCancelledBookingCompletedDelegate;
        
        private BeginOperationDelegate onBeginUpdateBookingAndCabStatusDelegate;
        
        private EndOperationDelegate onEndUpdateBookingAndCabStatusDelegate;
        
        private System.Threading.SendOrPostCallback onUpdateBookingAndCabStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginRateDriverDelegate;
        
        private EndOperationDelegate onEndRateDriverDelegate;
        
        private System.Threading.SendOrPostCallback onRateDriverCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public ServiceClient() {
        }
        
        public ServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<GetDataCompletedEventArgs> GetDataCompleted;
        
        public event System.EventHandler<GetDataUsingDataContractCompletedEventArgs> GetDataUsingDataContractCompleted;
        
        public event System.EventHandler<CalculateRoadDistanceCompletedEventArgs> CalculateRoadDistanceCompleted;
        
        public event System.EventHandler<CabBookingCompletedEventArgs> CabBookingCompleted;
        
        public event System.EventHandler<AuthenticateCustomerCompletedEventArgs> AuthenticateCustomerCompleted;
        
        public event System.EventHandler<AuthenticateDriverCompletedEventArgs> AuthenticateDriverCompleted;
        
        public event System.EventHandler<CustomerRegistrationRequestCompletedEventArgs> CustomerRegistrationRequestCompleted;
        
        public event System.EventHandler<UpdateLocationCompletedEventArgs> UpdateLocationCompleted;
        
        public event System.EventHandler<CabIDforDriverCompletedEventArgs> CabIDforDriverCompleted;
        
        public event System.EventHandler<CheckForDriverBookingCompletedEventArgs> CheckForDriverBookingCompleted;
        
        public event System.EventHandler<AddresstoCoordinatesCompletedEventArgs> AddresstoCoordinatesCompleted;
        
        public event System.EventHandler<MakeAvailableIfReachedCompletedEventArgs> MakeAvailableIfReachedCompleted;
        
        public event System.EventHandler<CheckCustomerBookingsCompletedEventArgs> CheckCustomerBookingsCompleted;
        
        public event System.EventHandler<GetBookingTimeCompletedEventArgs> GetBookingTimeCompleted;
        
        public event System.EventHandler<CancelBookingCompletedEventArgs> CancelBookingCompleted;
        
        public event System.EventHandler<CheckForDriverCancelledBookingsCompletedEventArgs> CheckForDriverCancelledBookingsCompleted;
        
        public event System.EventHandler<DetailsForCancelledBookingCompletedEventArgs> DetailsForCancelledBookingCompleted;
        
        public event System.EventHandler<UpdateBookingAndCabStatusCompletedEventArgs> UpdateBookingAndCabStatusCompleted;
        
        public event System.EventHandler<RateDriverCompletedEventArgs> RateDriverCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Prototype.ServiceReference1.IService.BeginGetData(int value, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetData(value, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Prototype.ServiceReference1.IService.EndGetData(System.IAsyncResult result) {
            return base.Channel.EndGetData(result);
        }
        
        private System.IAsyncResult OnBeginGetData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int value = ((int)(inValues[0]));
            return ((Prototype.ServiceReference1.IService)(this)).BeginGetData(value, callback, asyncState);
        }
        
        private object[] OnEndGetData(System.IAsyncResult result) {
            string retVal = ((Prototype.ServiceReference1.IService)(this)).EndGetData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataCompleted(object state) {
            if ((this.GetDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataCompleted(this, new GetDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataAsync(int value) {
            this.GetDataAsync(value, null);
        }
        
        public void GetDataAsync(int value, object userState) {
            if ((this.onBeginGetDataDelegate == null)) {
                this.onBeginGetDataDelegate = new BeginOperationDelegate(this.OnBeginGetData);
            }
            if ((this.onEndGetDataDelegate == null)) {
                this.onEndGetDataDelegate = new EndOperationDelegate(this.OnEndGetData);
            }
            if ((this.onGetDataCompletedDelegate == null)) {
                this.onGetDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataDelegate, new object[] {
                        value}, this.onEndGetDataDelegate, this.onGetDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Prototype.ServiceReference1.IService.BeginGetDataUsingDataContract(Prototype.ServiceReference1.CompositeType composite, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDataUsingDataContract(composite, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        Prototype.ServiceReference1.CompositeType Prototype.ServiceReference1.IService.EndGetDataUsingDataContract(System.IAsyncResult result) {
            return base.Channel.EndGetDataUsingDataContract(result);
        }
        
        private System.IAsyncResult OnBeginGetDataUsingDataContract(object[] inValues, System.AsyncCallback callback, object asyncState) {
            Prototype.ServiceReference1.CompositeType composite = ((Prototype.ServiceReference1.CompositeType)(inValues[0]));
            return ((Prototype.ServiceReference1.IService)(this)).BeginGetDataUsingDataContract(composite, callback, asyncState);
        }
        
        private object[] OnEndGetDataUsingDataContract(System.IAsyncResult result) {
            Prototype.ServiceReference1.CompositeType retVal = ((Prototype.ServiceReference1.IService)(this)).EndGetDataUsingDataContract(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDataUsingDataContractCompleted(object state) {
            if ((this.GetDataUsingDataContractCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDataUsingDataContractCompleted(this, new GetDataUsingDataContractCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDataUsingDataContractAsync(Prototype.ServiceReference1.CompositeType composite) {
            this.GetDataUsingDataContractAsync(composite, null);
        }
        
        public void GetDataUsingDataContractAsync(Prototype.ServiceReference1.CompositeType composite, object userState) {
            if ((this.onBeginGetDataUsingDataContractDelegate == null)) {
                this.onBeginGetDataUsingDataContractDelegate = new BeginOperationDelegate(this.OnBeginGetDataUsingDataContract);
            }
            if ((this.onEndGetDataUsingDataContractDelegate == null)) {
                this.onEndGetDataUsingDataContractDelegate = new EndOperationDelegate(this.OnEndGetDataUsingDataContract);
            }
            if ((this.onGetDataUsingDataContractCompletedDelegate == null)) {
                this.onGetDataUsingDataContractCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDataUsingDataContractCompleted);
            }
            base.InvokeAsync(this.onBeginGetDataUsingDataContractDelegate, new object[] {
                        composite}, this.onEndGetDataUsingDataContractDelegate, this.onGetDataUsingDataContractCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Prototype.ServiceReference1.IService.BeginCalculateRoadDistance(string Origin, string Destination, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCalculateRoadDistance(Origin, Destination, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        double Prototype.ServiceReference1.IService.EndCalculateRoadDistance(System.IAsyncResult result) {
            return base.Channel.EndCalculateRoadDistance(result);
        }
        
        private System.IAsyncResult OnBeginCalculateRoadDistance(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string Origin = ((string)(inValues[0]));
            string Destination = ((string)(inValues[1]));
            return ((Prototype.ServiceReference1.IService)(this)).BeginCalculateRoadDistance(Origin, Destination, callback, asyncState);
        }
        
        private object[] OnEndCalculateRoadDistance(System.IAsyncResult result) {
            double retVal = ((Prototype.ServiceReference1.IService)(this)).EndCalculateRoadDistance(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCalculateRoadDistanceCompleted(object state) {
            if ((this.CalculateRoadDistanceCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CalculateRoadDistanceCompleted(this, new CalculateRoadDistanceCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CalculateRoadDistanceAsync(string Origin, string Destination) {
            this.CalculateRoadDistanceAsync(Origin, Destination, null);
        }
        
        public void CalculateRoadDistanceAsync(string Origin, string Destination, object userState) {
            if ((this.onBeginCalculateRoadDistanceDelegate == null)) {
                this.onBeginCalculateRoadDistanceDelegate = new BeginOperationDelegate(this.OnBeginCalculateRoadDistance);
            }
            if ((this.onEndCalculateRoadDistanceDelegate == null)) {
                this.onEndCalculateRoadDistanceDelegate = new EndOperationDelegate(this.OnEndCalculateRoadDistance);
            }
            if ((this.onCalculateRoadDistanceCompletedDelegate == null)) {
                this.onCalculateRoadDistanceCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCalculateRoadDistanceCompleted);
            }
            base.InvokeAsync(this.onBeginCalculateRoadDistanceDelegate, new object[] {
                        Origin,
                        Destination}, this.onEndCalculateRoadDistanceDelegate, this.onCalculateRoadDistanceCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Prototype.ServiceReference1.IService.BeginCabBooking(string BookingStatus, System.DateTime BookingDateTime, string BookingOrigin, string BookingDestination, string BookingCabType, string SourceLat, string SourceLong, string DestinationLat, string DestinationLong, string CustomerID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCabBooking(BookingStatus, BookingDateTime, BookingOrigin, BookingDestination, BookingCabType, SourceLat, SourceLong, DestinationLat, DestinationLong, CustomerID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Prototype.ServiceReference1.IService.EndCabBooking(System.IAsyncResult result) {
            return base.Channel.EndCabBooking(result);
        }
        
        private System.IAsyncResult OnBeginCabBooking(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string BookingStatus = ((string)(inValues[0]));
            System.DateTime BookingDateTime = ((System.DateTime)(inValues[1]));
            string BookingOrigin = ((string)(inValues[2]));
            string BookingDestination = ((string)(inValues[3]));
            string BookingCabType = ((string)(inValues[4]));
            string SourceLat = ((string)(inValues[5]));
            string SourceLong = ((string)(inValues[6]));
            string DestinationLat = ((string)(inValues[7]));
            string DestinationLong = ((string)(inValues[8]));
            string CustomerID = ((string)(inValues[9]));
            return ((Prototype.ServiceReference1.IService)(this)).BeginCabBooking(BookingStatus, BookingDateTime, BookingOrigin, BookingDestination, BookingCabType, SourceLat, SourceLong, DestinationLat, DestinationLong, CustomerID, callback, asyncState);
        }
        
        private object[] OnEndCabBooking(System.IAsyncResult result) {
            string retVal = ((Prototype.ServiceReference1.IService)(this)).EndCabBooking(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCabBookingCompleted(object state) {
            if ((this.CabBookingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CabBookingCompleted(this, new CabBookingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CabBookingAsync(string BookingStatus, System.DateTime BookingDateTime, string BookingOrigin, string BookingDestination, string BookingCabType, string SourceLat, string SourceLong, string DestinationLat, string DestinationLong, string CustomerID) {
            this.CabBookingAsync(BookingStatus, BookingDateTime, BookingOrigin, BookingDestination, BookingCabType, SourceLat, SourceLong, DestinationLat, DestinationLong, CustomerID, null);
        }
        
        public void CabBookingAsync(string BookingStatus, System.DateTime BookingDateTime, string BookingOrigin, string BookingDestination, string BookingCabType, string SourceLat, string SourceLong, string DestinationLat, string DestinationLong, string CustomerID, object userState) {
            if ((this.onBeginCabBookingDelegate == null)) {
                this.onBeginCabBookingDelegate = new BeginOperationDelegate(this.OnBeginCabBooking);
            }
            if ((this.onEndCabBookingDelegate == null)) {
                this.onEndCabBookingDelegate = new EndOperationDelegate(this.OnEndCabBooking);
            }
            if ((this.onCabBookingCompletedDelegate == null)) {
                this.onCabBookingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCabBookingCompleted);
            }
            base.InvokeAsync(this.onBeginCabBookingDelegate, new object[] {
                        BookingStatus,
                        BookingDateTime,
                        BookingOrigin,
                        BookingDestination,
                        BookingCabType,
                        SourceLat,
                        SourceLong,
                        DestinationLat,
                        DestinationLong,
                        CustomerID}, this.onEndCabBookingDelegate, this.onCabBookingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Prototype.ServiceReference1.IService.BeginAuthenticateCustomer(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAuthenticateCustomer(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Prototype.ServiceReference1.IService.EndAuthenticateCustomer(System.IAsyncResult result) {
            return base.Channel.EndAuthenticateCustomer(result);
        }
        
        private System.IAsyncResult OnBeginAuthenticateCustomer(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((Prototype.ServiceReference1.IService)(this)).BeginAuthenticateCustomer(username, password, callback, asyncState);
        }
        
        private object[] OnEndAuthenticateCustomer(System.IAsyncResult result) {
            int retVal = ((Prototype.ServiceReference1.IService)(this)).EndAuthenticateCustomer(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAuthenticateCustomerCompleted(object state) {
            if ((this.AuthenticateCustomerCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AuthenticateCustomerCompleted(this, new AuthenticateCustomerCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AuthenticateCustomerAsync(string username, string password) {
            this.AuthenticateCustomerAsync(username, password, null);
        }
        
        public void AuthenticateCustomerAsync(string username, string password, object userState) {
            if ((this.onBeginAuthenticateCustomerDelegate == null)) {
                this.onBeginAuthenticateCustomerDelegate = new BeginOperationDelegate(this.OnBeginAuthenticateCustomer);
            }
            if ((this.onEndAuthenticateCustomerDelegate == null)) {
                this.onEndAuthenticateCustomerDelegate = new EndOperationDelegate(this.OnEndAuthenticateCustomer);
            }
            if ((this.onAuthenticateCustomerCompletedDelegate == null)) {
                this.onAuthenticateCustomerCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAuthenticateCustomerCompleted);
            }
            base.InvokeAsync(this.onBeginAuthenticateCustomerDelegate, new object[] {
                        username,
                        password}, this.onEndAuthenticateCustomerDelegate, this.onAuthenticateCustomerCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Prototype.ServiceReference1.IService.BeginAuthenticateDriver(string username, string password, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAuthenticateDriver(username, password, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Prototype.ServiceReference1.IService.EndAuthenticateDriver(System.IAsyncResult result) {
            return base.Channel.EndAuthenticateDriver(result);
        }
        
        private System.IAsyncResult OnBeginAuthenticateDriver(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string username = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            return ((Prototype.ServiceReference1.IService)(this)).BeginAuthenticateDriver(username, password, callback, asyncState);
        }
        
        private object[] OnEndAuthenticateDriver(System.IAsyncResult result) {
            int retVal = ((Prototype.ServiceReference1.IService)(this)).EndAuthenticateDriver(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAuthenticateDriverCompleted(object state) {
            if ((this.AuthenticateDriverCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AuthenticateDriverCompleted(this, new AuthenticateDriverCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AuthenticateDriverAsync(string username, string password) {
            this.AuthenticateDriverAsync(username, password, null);
        }
        
        public void AuthenticateDriverAsync(string username, string password, object userState) {
            if ((this.onBeginAuthenticateDriverDelegate == null)) {
                this.onBeginAuthenticateDriverDelegate = new BeginOperationDelegate(this.OnBeginAuthenticateDriver);
            }
            if ((this.onEndAuthenticateDriverDelegate == null)) {
                this.onEndAuthenticateDriverDelegate = new EndOperationDelegate(this.OnEndAuthenticateDriver);
            }
            if ((this.onAuthenticateDriverCompletedDelegate == null)) {
                this.onAuthenticateDriverCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAuthenticateDriverCompleted);
            }
            base.InvokeAsync(this.onBeginAuthenticateDriverDelegate, new object[] {
                        username,
                        password}, this.onEndAuthenticateDriverDelegate, this.onAuthenticateDriverCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Prototype.ServiceReference1.IService.BeginCustomerRegistrationRequest(string name, string password, string email, string phNum, string NIC, string address, string gender, string age, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCustomerRegistrationRequest(name, password, email, phNum, NIC, address, gender, age, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Prototype.ServiceReference1.IService.EndCustomerRegistrationRequest(System.IAsyncResult result) {
            return base.Channel.EndCustomerRegistrationRequest(result);
        }
        
        private System.IAsyncResult OnBeginCustomerRegistrationRequest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string name = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            string email = ((string)(inValues[2]));
            string phNum = ((string)(inValues[3]));
            string NIC = ((string)(inValues[4]));
            string address = ((string)(inValues[5]));
            string gender = ((string)(inValues[6]));
            string age = ((string)(inValues[7]));
            return ((Prototype.ServiceReference1.IService)(this)).BeginCustomerRegistrationRequest(name, password, email, phNum, NIC, address, gender, age, callback, asyncState);
        }
        
        private object[] OnEndCustomerRegistrationRequest(System.IAsyncResult result) {
            string retVal = ((Prototype.ServiceReference1.IService)(this)).EndCustomerRegistrationRequest(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCustomerRegistrationRequestCompleted(object state) {
            if ((this.CustomerRegistrationRequestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CustomerRegistrationRequestCompleted(this, new CustomerRegistrationRequestCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CustomerRegistrationRequestAsync(string name, string password, string email, string phNum, string NIC, string address, string gender, string age) {
            this.CustomerRegistrationRequestAsync(name, password, email, phNum, NIC, address, gender, age, null);
        }
        
        public void CustomerRegistrationRequestAsync(string name, string password, string email, string phNum, string NIC, string address, string gender, string age, object userState) {
            if ((this.onBeginCustomerRegistrationRequestDelegate == null)) {
                this.onBeginCustomerRegistrationRequestDelegate = new BeginOperationDelegate(this.OnBeginCustomerRegistrationRequest);
            }
            if ((this.onEndCustomerRegistrationRequestDelegate == null)) {
                this.onEndCustomerRegistrationRequestDelegate = new EndOperationDelegate(this.OnEndCustomerRegistrationRequest);
            }
            if ((this.onCustomerRegistrationRequestCompletedDelegate == null)) {
                this.onCustomerRegistrationRequestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCustomerRegistrationRequestCompleted);
            }
            base.InvokeAsync(this.onBeginCustomerRegistrationRequestDelegate, new object[] {
                        name,
                        password,
                        email,
                        phNum,
                        NIC,
                        address,
                        gender,
                        age}, this.onEndCustomerRegistrationRequestDelegate, this.onCustomerRegistrationRequestCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Prototype.ServiceReference1.IService.BeginUpdateLocation(string latitude, string longitude, int CabID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateLocation(latitude, longitude, CabID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Prototype.ServiceReference1.IService.EndUpdateLocation(System.IAsyncResult result) {
            return base.Channel.EndUpdateLocation(result);
        }
        
        private System.IAsyncResult OnBeginUpdateLocation(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string latitude = ((string)(inValues[0]));
            string longitude = ((string)(inValues[1]));
            int CabID = ((int)(inValues[2]));
            return ((Prototype.ServiceReference1.IService)(this)).BeginUpdateLocation(latitude, longitude, CabID, callback, asyncState);
        }
        
        private object[] OnEndUpdateLocation(System.IAsyncResult result) {
            string retVal = ((Prototype.ServiceReference1.IService)(this)).EndUpdateLocation(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateLocationCompleted(object state) {
            if ((this.UpdateLocationCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateLocationCompleted(this, new UpdateLocationCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateLocationAsync(string latitude, string longitude, int CabID) {
            this.UpdateLocationAsync(latitude, longitude, CabID, null);
        }
        
        public void UpdateLocationAsync(string latitude, string longitude, int CabID, object userState) {
            if ((this.onBeginUpdateLocationDelegate == null)) {
                this.onBeginUpdateLocationDelegate = new BeginOperationDelegate(this.OnBeginUpdateLocation);
            }
            if ((this.onEndUpdateLocationDelegate == null)) {
                this.onEndUpdateLocationDelegate = new EndOperationDelegate(this.OnEndUpdateLocation);
            }
            if ((this.onUpdateLocationCompletedDelegate == null)) {
                this.onUpdateLocationCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateLocationCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateLocationDelegate, new object[] {
                        latitude,
                        longitude,
                        CabID}, this.onEndUpdateLocationDelegate, this.onUpdateLocationCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Prototype.ServiceReference1.IService.BeginCabIDforDriver(int DriverID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCabIDforDriver(DriverID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Prototype.ServiceReference1.IService.EndCabIDforDriver(System.IAsyncResult result) {
            return base.Channel.EndCabIDforDriver(result);
        }
        
        private System.IAsyncResult OnBeginCabIDforDriver(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int DriverID = ((int)(inValues[0]));
            return ((Prototype.ServiceReference1.IService)(this)).BeginCabIDforDriver(DriverID, callback, asyncState);
        }
        
        private object[] OnEndCabIDforDriver(System.IAsyncResult result) {
            int retVal = ((Prototype.ServiceReference1.IService)(this)).EndCabIDforDriver(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCabIDforDriverCompleted(object state) {
            if ((this.CabIDforDriverCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CabIDforDriverCompleted(this, new CabIDforDriverCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CabIDforDriverAsync(int DriverID) {
            this.CabIDforDriverAsync(DriverID, null);
        }
        
        public void CabIDforDriverAsync(int DriverID, object userState) {
            if ((this.onBeginCabIDforDriverDelegate == null)) {
                this.onBeginCabIDforDriverDelegate = new BeginOperationDelegate(this.OnBeginCabIDforDriver);
            }
            if ((this.onEndCabIDforDriverDelegate == null)) {
                this.onEndCabIDforDriverDelegate = new EndOperationDelegate(this.OnEndCabIDforDriver);
            }
            if ((this.onCabIDforDriverCompletedDelegate == null)) {
                this.onCabIDforDriverCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCabIDforDriverCompleted);
            }
            base.InvokeAsync(this.onBeginCabIDforDriverDelegate, new object[] {
                        DriverID}, this.onEndCabIDforDriverDelegate, this.onCabIDforDriverCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Prototype.ServiceReference1.IService.BeginCheckForDriverBooking(int CabID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckForDriverBooking(CabID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Prototype.ServiceReference1.IService.EndCheckForDriverBooking(System.IAsyncResult result) {
            return base.Channel.EndCheckForDriverBooking(result);
        }
        
        private System.IAsyncResult OnBeginCheckForDriverBooking(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int CabID = ((int)(inValues[0]));
            return ((Prototype.ServiceReference1.IService)(this)).BeginCheckForDriverBooking(CabID, callback, asyncState);
        }
        
        private object[] OnEndCheckForDriverBooking(System.IAsyncResult result) {
            string retVal = ((Prototype.ServiceReference1.IService)(this)).EndCheckForDriverBooking(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckForDriverBookingCompleted(object state) {
            if ((this.CheckForDriverBookingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckForDriverBookingCompleted(this, new CheckForDriverBookingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckForDriverBookingAsync(int CabID) {
            this.CheckForDriverBookingAsync(CabID, null);
        }
        
        public void CheckForDriverBookingAsync(int CabID, object userState) {
            if ((this.onBeginCheckForDriverBookingDelegate == null)) {
                this.onBeginCheckForDriverBookingDelegate = new BeginOperationDelegate(this.OnBeginCheckForDriverBooking);
            }
            if ((this.onEndCheckForDriverBookingDelegate == null)) {
                this.onEndCheckForDriverBookingDelegate = new EndOperationDelegate(this.OnEndCheckForDriverBooking);
            }
            if ((this.onCheckForDriverBookingCompletedDelegate == null)) {
                this.onCheckForDriverBookingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckForDriverBookingCompleted);
            }
            base.InvokeAsync(this.onBeginCheckForDriverBookingDelegate, new object[] {
                        CabID}, this.onEndCheckForDriverBookingDelegate, this.onCheckForDriverBookingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Prototype.ServiceReference1.IService.BeginAddresstoCoordinates(string location, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginAddresstoCoordinates(location, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Prototype.ServiceReference1.IService.EndAddresstoCoordinates(System.IAsyncResult result) {
            return base.Channel.EndAddresstoCoordinates(result);
        }
        
        private System.IAsyncResult OnBeginAddresstoCoordinates(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string location = ((string)(inValues[0]));
            return ((Prototype.ServiceReference1.IService)(this)).BeginAddresstoCoordinates(location, callback, asyncState);
        }
        
        private object[] OnEndAddresstoCoordinates(System.IAsyncResult result) {
            string retVal = ((Prototype.ServiceReference1.IService)(this)).EndAddresstoCoordinates(result);
            return new object[] {
                    retVal};
        }
        
        private void OnAddresstoCoordinatesCompleted(object state) {
            if ((this.AddresstoCoordinatesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.AddresstoCoordinatesCompleted(this, new AddresstoCoordinatesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void AddresstoCoordinatesAsync(string location) {
            this.AddresstoCoordinatesAsync(location, null);
        }
        
        public void AddresstoCoordinatesAsync(string location, object userState) {
            if ((this.onBeginAddresstoCoordinatesDelegate == null)) {
                this.onBeginAddresstoCoordinatesDelegate = new BeginOperationDelegate(this.OnBeginAddresstoCoordinates);
            }
            if ((this.onEndAddresstoCoordinatesDelegate == null)) {
                this.onEndAddresstoCoordinatesDelegate = new EndOperationDelegate(this.OnEndAddresstoCoordinates);
            }
            if ((this.onAddresstoCoordinatesCompletedDelegate == null)) {
                this.onAddresstoCoordinatesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnAddresstoCoordinatesCompleted);
            }
            base.InvokeAsync(this.onBeginAddresstoCoordinatesDelegate, new object[] {
                        location}, this.onEndAddresstoCoordinatesDelegate, this.onAddresstoCoordinatesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Prototype.ServiceReference1.IService.BeginMakeAvailableIfReached(int CabID, string DestinationLat, string DestinationLong, int BookingID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMakeAvailableIfReached(CabID, DestinationLat, DestinationLong, BookingID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool Prototype.ServiceReference1.IService.EndMakeAvailableIfReached(System.IAsyncResult result) {
            return base.Channel.EndMakeAvailableIfReached(result);
        }
        
        private System.IAsyncResult OnBeginMakeAvailableIfReached(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int CabID = ((int)(inValues[0]));
            string DestinationLat = ((string)(inValues[1]));
            string DestinationLong = ((string)(inValues[2]));
            int BookingID = ((int)(inValues[3]));
            return ((Prototype.ServiceReference1.IService)(this)).BeginMakeAvailableIfReached(CabID, DestinationLat, DestinationLong, BookingID, callback, asyncState);
        }
        
        private object[] OnEndMakeAvailableIfReached(System.IAsyncResult result) {
            bool retVal = ((Prototype.ServiceReference1.IService)(this)).EndMakeAvailableIfReached(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMakeAvailableIfReachedCompleted(object state) {
            if ((this.MakeAvailableIfReachedCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MakeAvailableIfReachedCompleted(this, new MakeAvailableIfReachedCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MakeAvailableIfReachedAsync(int CabID, string DestinationLat, string DestinationLong, int BookingID) {
            this.MakeAvailableIfReachedAsync(CabID, DestinationLat, DestinationLong, BookingID, null);
        }
        
        public void MakeAvailableIfReachedAsync(int CabID, string DestinationLat, string DestinationLong, int BookingID, object userState) {
            if ((this.onBeginMakeAvailableIfReachedDelegate == null)) {
                this.onBeginMakeAvailableIfReachedDelegate = new BeginOperationDelegate(this.OnBeginMakeAvailableIfReached);
            }
            if ((this.onEndMakeAvailableIfReachedDelegate == null)) {
                this.onEndMakeAvailableIfReachedDelegate = new EndOperationDelegate(this.OnEndMakeAvailableIfReached);
            }
            if ((this.onMakeAvailableIfReachedCompletedDelegate == null)) {
                this.onMakeAvailableIfReachedCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMakeAvailableIfReachedCompleted);
            }
            base.InvokeAsync(this.onBeginMakeAvailableIfReachedDelegate, new object[] {
                        CabID,
                        DestinationLat,
                        DestinationLong,
                        BookingID}, this.onEndMakeAvailableIfReachedDelegate, this.onMakeAvailableIfReachedCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Prototype.ServiceReference1.IService.BeginCheckCustomerBookings(int CustomerID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckCustomerBookings(CustomerID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Prototype.ServiceReference1.IService.EndCheckCustomerBookings(System.IAsyncResult result) {
            return base.Channel.EndCheckCustomerBookings(result);
        }
        
        private System.IAsyncResult OnBeginCheckCustomerBookings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int CustomerID = ((int)(inValues[0]));
            return ((Prototype.ServiceReference1.IService)(this)).BeginCheckCustomerBookings(CustomerID, callback, asyncState);
        }
        
        private object[] OnEndCheckCustomerBookings(System.IAsyncResult result) {
            int retVal = ((Prototype.ServiceReference1.IService)(this)).EndCheckCustomerBookings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckCustomerBookingsCompleted(object state) {
            if ((this.CheckCustomerBookingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckCustomerBookingsCompleted(this, new CheckCustomerBookingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckCustomerBookingsAsync(int CustomerID) {
            this.CheckCustomerBookingsAsync(CustomerID, null);
        }
        
        public void CheckCustomerBookingsAsync(int CustomerID, object userState) {
            if ((this.onBeginCheckCustomerBookingsDelegate == null)) {
                this.onBeginCheckCustomerBookingsDelegate = new BeginOperationDelegate(this.OnBeginCheckCustomerBookings);
            }
            if ((this.onEndCheckCustomerBookingsDelegate == null)) {
                this.onEndCheckCustomerBookingsDelegate = new EndOperationDelegate(this.OnEndCheckCustomerBookings);
            }
            if ((this.onCheckCustomerBookingsCompletedDelegate == null)) {
                this.onCheckCustomerBookingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckCustomerBookingsCompleted);
            }
            base.InvokeAsync(this.onBeginCheckCustomerBookingsDelegate, new object[] {
                        CustomerID}, this.onEndCheckCustomerBookingsDelegate, this.onCheckCustomerBookingsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Prototype.ServiceReference1.IService.BeginGetBookingTime(int BookingID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetBookingTime(BookingID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.DateTime Prototype.ServiceReference1.IService.EndGetBookingTime(System.IAsyncResult result) {
            return base.Channel.EndGetBookingTime(result);
        }
        
        private System.IAsyncResult OnBeginGetBookingTime(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int BookingID = ((int)(inValues[0]));
            return ((Prototype.ServiceReference1.IService)(this)).BeginGetBookingTime(BookingID, callback, asyncState);
        }
        
        private object[] OnEndGetBookingTime(System.IAsyncResult result) {
            System.DateTime retVal = ((Prototype.ServiceReference1.IService)(this)).EndGetBookingTime(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetBookingTimeCompleted(object state) {
            if ((this.GetBookingTimeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetBookingTimeCompleted(this, new GetBookingTimeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetBookingTimeAsync(int BookingID) {
            this.GetBookingTimeAsync(BookingID, null);
        }
        
        public void GetBookingTimeAsync(int BookingID, object userState) {
            if ((this.onBeginGetBookingTimeDelegate == null)) {
                this.onBeginGetBookingTimeDelegate = new BeginOperationDelegate(this.OnBeginGetBookingTime);
            }
            if ((this.onEndGetBookingTimeDelegate == null)) {
                this.onEndGetBookingTimeDelegate = new EndOperationDelegate(this.OnEndGetBookingTime);
            }
            if ((this.onGetBookingTimeCompletedDelegate == null)) {
                this.onGetBookingTimeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetBookingTimeCompleted);
            }
            base.InvokeAsync(this.onBeginGetBookingTimeDelegate, new object[] {
                        BookingID}, this.onEndGetBookingTimeDelegate, this.onGetBookingTimeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Prototype.ServiceReference1.IService.BeginCancelBooking(int BookingID, string time, string BookingStatus, int ApproximateFare, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCancelBooking(BookingID, time, BookingStatus, ApproximateFare, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Prototype.ServiceReference1.IService.EndCancelBooking(System.IAsyncResult result) {
            return base.Channel.EndCancelBooking(result);
        }
        
        private System.IAsyncResult OnBeginCancelBooking(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int BookingID = ((int)(inValues[0]));
            string time = ((string)(inValues[1]));
            string BookingStatus = ((string)(inValues[2]));
            int ApproximateFare = ((int)(inValues[3]));
            return ((Prototype.ServiceReference1.IService)(this)).BeginCancelBooking(BookingID, time, BookingStatus, ApproximateFare, callback, asyncState);
        }
        
        private object[] OnEndCancelBooking(System.IAsyncResult result) {
            string retVal = ((Prototype.ServiceReference1.IService)(this)).EndCancelBooking(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCancelBookingCompleted(object state) {
            if ((this.CancelBookingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CancelBookingCompleted(this, new CancelBookingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CancelBookingAsync(int BookingID, string time, string BookingStatus, int ApproximateFare) {
            this.CancelBookingAsync(BookingID, time, BookingStatus, ApproximateFare, null);
        }
        
        public void CancelBookingAsync(int BookingID, string time, string BookingStatus, int ApproximateFare, object userState) {
            if ((this.onBeginCancelBookingDelegate == null)) {
                this.onBeginCancelBookingDelegate = new BeginOperationDelegate(this.OnBeginCancelBooking);
            }
            if ((this.onEndCancelBookingDelegate == null)) {
                this.onEndCancelBookingDelegate = new EndOperationDelegate(this.OnEndCancelBooking);
            }
            if ((this.onCancelBookingCompletedDelegate == null)) {
                this.onCancelBookingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCancelBookingCompleted);
            }
            base.InvokeAsync(this.onBeginCancelBookingDelegate, new object[] {
                        BookingID,
                        time,
                        BookingStatus,
                        ApproximateFare}, this.onEndCancelBookingDelegate, this.onCancelBookingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Prototype.ServiceReference1.IService.BeginCheckForDriverCancelledBookings(int CabID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCheckForDriverCancelledBookings(CabID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Prototype.ServiceReference1.IService.EndCheckForDriverCancelledBookings(System.IAsyncResult result) {
            return base.Channel.EndCheckForDriverCancelledBookings(result);
        }
        
        private System.IAsyncResult OnBeginCheckForDriverCancelledBookings(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int CabID = ((int)(inValues[0]));
            return ((Prototype.ServiceReference1.IService)(this)).BeginCheckForDriverCancelledBookings(CabID, callback, asyncState);
        }
        
        private object[] OnEndCheckForDriverCancelledBookings(System.IAsyncResult result) {
            int retVal = ((Prototype.ServiceReference1.IService)(this)).EndCheckForDriverCancelledBookings(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCheckForDriverCancelledBookingsCompleted(object state) {
            if ((this.CheckForDriverCancelledBookingsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CheckForDriverCancelledBookingsCompleted(this, new CheckForDriverCancelledBookingsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CheckForDriverCancelledBookingsAsync(int CabID) {
            this.CheckForDriverCancelledBookingsAsync(CabID, null);
        }
        
        public void CheckForDriverCancelledBookingsAsync(int CabID, object userState) {
            if ((this.onBeginCheckForDriverCancelledBookingsDelegate == null)) {
                this.onBeginCheckForDriverCancelledBookingsDelegate = new BeginOperationDelegate(this.OnBeginCheckForDriverCancelledBookings);
            }
            if ((this.onEndCheckForDriverCancelledBookingsDelegate == null)) {
                this.onEndCheckForDriverCancelledBookingsDelegate = new EndOperationDelegate(this.OnEndCheckForDriverCancelledBookings);
            }
            if ((this.onCheckForDriverCancelledBookingsCompletedDelegate == null)) {
                this.onCheckForDriverCancelledBookingsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCheckForDriverCancelledBookingsCompleted);
            }
            base.InvokeAsync(this.onBeginCheckForDriverCancelledBookingsDelegate, new object[] {
                        CabID}, this.onEndCheckForDriverCancelledBookingsDelegate, this.onCheckForDriverCancelledBookingsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Prototype.ServiceReference1.IService.BeginDetailsForCancelledBooking(int BookingID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDetailsForCancelledBooking(BookingID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Prototype.ServiceReference1.IService.EndDetailsForCancelledBooking(System.IAsyncResult result) {
            return base.Channel.EndDetailsForCancelledBooking(result);
        }
        
        private System.IAsyncResult OnBeginDetailsForCancelledBooking(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int BookingID = ((int)(inValues[0]));
            return ((Prototype.ServiceReference1.IService)(this)).BeginDetailsForCancelledBooking(BookingID, callback, asyncState);
        }
        
        private object[] OnEndDetailsForCancelledBooking(System.IAsyncResult result) {
            string retVal = ((Prototype.ServiceReference1.IService)(this)).EndDetailsForCancelledBooking(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDetailsForCancelledBookingCompleted(object state) {
            if ((this.DetailsForCancelledBookingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DetailsForCancelledBookingCompleted(this, new DetailsForCancelledBookingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DetailsForCancelledBookingAsync(int BookingID) {
            this.DetailsForCancelledBookingAsync(BookingID, null);
        }
        
        public void DetailsForCancelledBookingAsync(int BookingID, object userState) {
            if ((this.onBeginDetailsForCancelledBookingDelegate == null)) {
                this.onBeginDetailsForCancelledBookingDelegate = new BeginOperationDelegate(this.OnBeginDetailsForCancelledBooking);
            }
            if ((this.onEndDetailsForCancelledBookingDelegate == null)) {
                this.onEndDetailsForCancelledBookingDelegate = new EndOperationDelegate(this.OnEndDetailsForCancelledBooking);
            }
            if ((this.onDetailsForCancelledBookingCompletedDelegate == null)) {
                this.onDetailsForCancelledBookingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDetailsForCancelledBookingCompleted);
            }
            base.InvokeAsync(this.onBeginDetailsForCancelledBookingDelegate, new object[] {
                        BookingID}, this.onEndDetailsForCancelledBookingDelegate, this.onDetailsForCancelledBookingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Prototype.ServiceReference1.IService.BeginUpdateBookingAndCabStatus(int BookingID, int CabID, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginUpdateBookingAndCabStatus(BookingID, CabID, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string Prototype.ServiceReference1.IService.EndUpdateBookingAndCabStatus(System.IAsyncResult result) {
            return base.Channel.EndUpdateBookingAndCabStatus(result);
        }
        
        private System.IAsyncResult OnBeginUpdateBookingAndCabStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            int BookingID = ((int)(inValues[0]));
            int CabID = ((int)(inValues[1]));
            return ((Prototype.ServiceReference1.IService)(this)).BeginUpdateBookingAndCabStatus(BookingID, CabID, callback, asyncState);
        }
        
        private object[] OnEndUpdateBookingAndCabStatus(System.IAsyncResult result) {
            string retVal = ((Prototype.ServiceReference1.IService)(this)).EndUpdateBookingAndCabStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnUpdateBookingAndCabStatusCompleted(object state) {
            if ((this.UpdateBookingAndCabStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.UpdateBookingAndCabStatusCompleted(this, new UpdateBookingAndCabStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void UpdateBookingAndCabStatusAsync(int BookingID, int CabID) {
            this.UpdateBookingAndCabStatusAsync(BookingID, CabID, null);
        }
        
        public void UpdateBookingAndCabStatusAsync(int BookingID, int CabID, object userState) {
            if ((this.onBeginUpdateBookingAndCabStatusDelegate == null)) {
                this.onBeginUpdateBookingAndCabStatusDelegate = new BeginOperationDelegate(this.OnBeginUpdateBookingAndCabStatus);
            }
            if ((this.onEndUpdateBookingAndCabStatusDelegate == null)) {
                this.onEndUpdateBookingAndCabStatusDelegate = new EndOperationDelegate(this.OnEndUpdateBookingAndCabStatus);
            }
            if ((this.onUpdateBookingAndCabStatusCompletedDelegate == null)) {
                this.onUpdateBookingAndCabStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnUpdateBookingAndCabStatusCompleted);
            }
            base.InvokeAsync(this.onBeginUpdateBookingAndCabStatusDelegate, new object[] {
                        BookingID,
                        CabID}, this.onEndUpdateBookingAndCabStatusDelegate, this.onUpdateBookingAndCabStatusCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult Prototype.ServiceReference1.IService.BeginRateDriver(string CabRegNo, int rating, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRateDriver(CabRegNo, rating, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        int Prototype.ServiceReference1.IService.EndRateDriver(System.IAsyncResult result) {
            return base.Channel.EndRateDriver(result);
        }
        
        private System.IAsyncResult OnBeginRateDriver(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string CabRegNo = ((string)(inValues[0]));
            int rating = ((int)(inValues[1]));
            return ((Prototype.ServiceReference1.IService)(this)).BeginRateDriver(CabRegNo, rating, callback, asyncState);
        }
        
        private object[] OnEndRateDriver(System.IAsyncResult result) {
            int retVal = ((Prototype.ServiceReference1.IService)(this)).EndRateDriver(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRateDriverCompleted(object state) {
            if ((this.RateDriverCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RateDriverCompleted(this, new RateDriverCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RateDriverAsync(string CabRegNo, int rating) {
            this.RateDriverAsync(CabRegNo, rating, null);
        }
        
        public void RateDriverAsync(string CabRegNo, int rating, object userState) {
            if ((this.onBeginRateDriverDelegate == null)) {
                this.onBeginRateDriverDelegate = new BeginOperationDelegate(this.OnBeginRateDriver);
            }
            if ((this.onEndRateDriverDelegate == null)) {
                this.onEndRateDriverDelegate = new EndOperationDelegate(this.OnEndRateDriver);
            }
            if ((this.onRateDriverCompletedDelegate == null)) {
                this.onRateDriverCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRateDriverCompleted);
            }
            base.InvokeAsync(this.onBeginRateDriverDelegate, new object[] {
                        CabRegNo,
                        rating}, this.onEndRateDriverDelegate, this.onRateDriverCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override Prototype.ServiceReference1.IService CreateChannel() {
            return new ServiceClientChannel(this);
        }
        
        private class ServiceClientChannel : ChannelBase<Prototype.ServiceReference1.IService>, Prototype.ServiceReference1.IService {
            
            public ServiceClientChannel(System.ServiceModel.ClientBase<Prototype.ServiceReference1.IService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGetData(int value, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = value;
                System.IAsyncResult _result = base.BeginInvoke("GetData", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetData(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDataUsingDataContract(Prototype.ServiceReference1.CompositeType composite, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = composite;
                System.IAsyncResult _result = base.BeginInvoke("GetDataUsingDataContract", _args, callback, asyncState);
                return _result;
            }
            
            public Prototype.ServiceReference1.CompositeType EndGetDataUsingDataContract(System.IAsyncResult result) {
                object[] _args = new object[0];
                Prototype.ServiceReference1.CompositeType _result = ((Prototype.ServiceReference1.CompositeType)(base.EndInvoke("GetDataUsingDataContract", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCalculateRoadDistance(string Origin, string Destination, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = Origin;
                _args[1] = Destination;
                System.IAsyncResult _result = base.BeginInvoke("CalculateRoadDistance", _args, callback, asyncState);
                return _result;
            }
            
            public double EndCalculateRoadDistance(System.IAsyncResult result) {
                object[] _args = new object[0];
                double _result = ((double)(base.EndInvoke("CalculateRoadDistance", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCabBooking(string BookingStatus, System.DateTime BookingDateTime, string BookingOrigin, string BookingDestination, string BookingCabType, string SourceLat, string SourceLong, string DestinationLat, string DestinationLong, string CustomerID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[10];
                _args[0] = BookingStatus;
                _args[1] = BookingDateTime;
                _args[2] = BookingOrigin;
                _args[3] = BookingDestination;
                _args[4] = BookingCabType;
                _args[5] = SourceLat;
                _args[6] = SourceLong;
                _args[7] = DestinationLat;
                _args[8] = DestinationLong;
                _args[9] = CustomerID;
                System.IAsyncResult _result = base.BeginInvoke("CabBooking", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCabBooking(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CabBooking", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAuthenticateCustomer(string username, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("AuthenticateCustomer", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAuthenticateCustomer(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("AuthenticateCustomer", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAuthenticateDriver(string username, string password, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = username;
                _args[1] = password;
                System.IAsyncResult _result = base.BeginInvoke("AuthenticateDriver", _args, callback, asyncState);
                return _result;
            }
            
            public int EndAuthenticateDriver(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("AuthenticateDriver", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCustomerRegistrationRequest(string name, string password, string email, string phNum, string NIC, string address, string gender, string age, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[8];
                _args[0] = name;
                _args[1] = password;
                _args[2] = email;
                _args[3] = phNum;
                _args[4] = NIC;
                _args[5] = address;
                _args[6] = gender;
                _args[7] = age;
                System.IAsyncResult _result = base.BeginInvoke("CustomerRegistrationRequest", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCustomerRegistrationRequest(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CustomerRegistrationRequest", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateLocation(string latitude, string longitude, int CabID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = latitude;
                _args[1] = longitude;
                _args[2] = CabID;
                System.IAsyncResult _result = base.BeginInvoke("UpdateLocation", _args, callback, asyncState);
                return _result;
            }
            
            public string EndUpdateLocation(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("UpdateLocation", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCabIDforDriver(int DriverID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = DriverID;
                System.IAsyncResult _result = base.BeginInvoke("CabIDforDriver", _args, callback, asyncState);
                return _result;
            }
            
            public int EndCabIDforDriver(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("CabIDforDriver", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCheckForDriverBooking(int CabID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = CabID;
                System.IAsyncResult _result = base.BeginInvoke("CheckForDriverBooking", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCheckForDriverBooking(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CheckForDriverBooking", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginAddresstoCoordinates(string location, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = location;
                System.IAsyncResult _result = base.BeginInvoke("AddresstoCoordinates", _args, callback, asyncState);
                return _result;
            }
            
            public string EndAddresstoCoordinates(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("AddresstoCoordinates", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMakeAvailableIfReached(int CabID, string DestinationLat, string DestinationLong, int BookingID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = CabID;
                _args[1] = DestinationLat;
                _args[2] = DestinationLong;
                _args[3] = BookingID;
                System.IAsyncResult _result = base.BeginInvoke("MakeAvailableIfReached", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndMakeAvailableIfReached(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("MakeAvailableIfReached", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCheckCustomerBookings(int CustomerID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = CustomerID;
                System.IAsyncResult _result = base.BeginInvoke("CheckCustomerBookings", _args, callback, asyncState);
                return _result;
            }
            
            public int EndCheckCustomerBookings(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("CheckCustomerBookings", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetBookingTime(int BookingID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = BookingID;
                System.IAsyncResult _result = base.BeginInvoke("GetBookingTime", _args, callback, asyncState);
                return _result;
            }
            
            public System.DateTime EndGetBookingTime(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.DateTime _result = ((System.DateTime)(base.EndInvoke("GetBookingTime", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCancelBooking(int BookingID, string time, string BookingStatus, int ApproximateFare, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = BookingID;
                _args[1] = time;
                _args[2] = BookingStatus;
                _args[3] = ApproximateFare;
                System.IAsyncResult _result = base.BeginInvoke("CancelBooking", _args, callback, asyncState);
                return _result;
            }
            
            public string EndCancelBooking(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("CancelBooking", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCheckForDriverCancelledBookings(int CabID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = CabID;
                System.IAsyncResult _result = base.BeginInvoke("CheckForDriverCancelledBookings", _args, callback, asyncState);
                return _result;
            }
            
            public int EndCheckForDriverCancelledBookings(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("CheckForDriverCancelledBookings", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDetailsForCancelledBooking(int BookingID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = BookingID;
                System.IAsyncResult _result = base.BeginInvoke("DetailsForCancelledBooking", _args, callback, asyncState);
                return _result;
            }
            
            public string EndDetailsForCancelledBooking(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("DetailsForCancelledBooking", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginUpdateBookingAndCabStatus(int BookingID, int CabID, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = BookingID;
                _args[1] = CabID;
                System.IAsyncResult _result = base.BeginInvoke("UpdateBookingAndCabStatus", _args, callback, asyncState);
                return _result;
            }
            
            public string EndUpdateBookingAndCabStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("UpdateBookingAndCabStatus", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRateDriver(string CabRegNo, int rating, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = CabRegNo;
                _args[1] = rating;
                System.IAsyncResult _result = base.BeginInvoke("RateDriver", _args, callback, asyncState);
                return _result;
            }
            
            public int EndRateDriver(System.IAsyncResult result) {
                object[] _args = new object[0];
                int _result = ((int)(base.EndInvoke("RateDriver", _args, result)));
                return _result;
            }
        }
    }
}
